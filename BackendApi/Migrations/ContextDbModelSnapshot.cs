// <auto-generated />
using System;
using BackendEntities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BackendApi.Migrations
{
    [DbContext(typeof(ContextDb))]
    partial class ContextDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackendEntities.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Category");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("621af3a2-60e5-49cc-bb82-701be8de64df"),
                            Name = "Мелкая бытовая техника"
                        });
                });

            modelBuilder.Entity("BackendEntities.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("varchar");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Customer");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("BackendEntities.Entities.Delivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ProductCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Delivery");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductId");

                    b.HasIndex(new[] { "StoreId" }, "IX_StoreId");

                    b.ToTable("Deliverys", (string)null);
                });

            modelBuilder.Entity("BackendEntities.Entities.Manufacture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("varchar");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Manufacture");

                    b.ToTable("Manufacture", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba3d9b24-abf6-4ba5-84d3-949e10e7dc09"),
                            Name = "Bosh"
                        });
                });

            modelBuilder.Entity("BackendEntities.Entities.PriceChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DataPriceChange")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("NewPrice")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_dbo.PriceChange");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductId")
                        .HasDatabaseName("IX_ProductId1");

                    b.ToTable("PriceChanges", (string)null);
                });

            modelBuilder.Entity("BackendEntities.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ManufactureId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("varchar");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Product");

                    b.HasIndex(new[] { "CategoryId" }, "IX_CategoryId");

                    b.HasIndex(new[] { "ManufactureId" }, "IX_ManufactureId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("BackendEntities.Entities.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PurshaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Purchase");

                    b.HasIndex(new[] { "CustomerId" }, "IX_CustomerId");

                    b.HasIndex(new[] { "StoreId" }, "IX_StoreId")
                        .HasDatabaseName("IX_StoreId1");

                    b.ToTable("Purchases", (string)null);
                });

            modelBuilder.Entity("BackendEntities.Entities.PurchaseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ProductCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<double?>("ProductPrice")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("PurchaseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_dbo.PurchaseItem");

                    b.HasIndex("PurchaseId")
                        .IsUnique();

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductId")
                        .HasDatabaseName("IX_ProductId2");

                    b.HasIndex(new[] { "PurchaseId" }, "IX_PurchaseId");

                    b.ToTable("PurchaseItems", (string)null);
                });

            modelBuilder.Entity("BackendEntities.Entities.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("varchar");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Store");

                    b.ToTable("Stores", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c3381ec-2460-404c-b8bf-74b0a814f3a7"),
                            Name = "Филиал на Киевской"
                        });
                });

            modelBuilder.Entity("BackendEntities.Entities.Delivery", b =>
                {
                    b.HasOne("BackendEntities.Entities.Product", "Product")
                        .WithMany("Deliveries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendEntities.Entities.Store", "Store")
                        .WithMany("Deliveries")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BackendEntities.Entities.PriceChange", b =>
                {
                    b.HasOne("BackendEntities.Entities.Product", "Product")
                        .WithMany("PriceChanges")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BackendEntities.Entities.Product", b =>
                {
                    b.HasOne("BackendEntities.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BackendEntities.Entities.Manufacture", "Manufacture")
                        .WithMany("Products")
                        .HasForeignKey("ManufactureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");

                    b.Navigation("Manufacture");
                });

            modelBuilder.Entity("BackendEntities.Entities.Purchase", b =>
                {
                    b.HasOne("BackendEntities.Entities.Customer", "Customer")
                        .WithMany("Purchases")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BackendEntities.Entities.Store", "Store")
                        .WithMany("Purchases")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BackendEntities.Entities.PurchaseItem", b =>
                {
                    b.HasOne("BackendEntities.Entities.Product", "Product")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BackendEntities.Entities.Purchase", "Purchase")
                        .WithOne("PurchaseItems")
                        .HasForeignKey("BackendEntities.Entities.PurchaseItem", "PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("BackendEntities.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BackendEntities.Entities.Customer", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("BackendEntities.Entities.Manufacture", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BackendEntities.Entities.Product", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("PriceChanges");

                    b.Navigation("PurchaseItems");
                });

            modelBuilder.Entity("BackendEntities.Entities.Purchase", b =>
                {
                    b.Navigation("PurchaseItems");
                });

            modelBuilder.Entity("BackendEntities.Entities.Store", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
